import{_ as t,c as a,a0 as i,o}from"./chunks/framework.CGHvQLJz.js";const b=JSON.parse('{"title":"UIAbility组件生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"UIAbility组件生命周期.md","filePath":"UIAbility组件生命周期.md","lastUpdated":null}'),r={name:"UIAbility组件生命周期.md"};function n(d,e,l,c,g,s){return o(),a("div",null,e[0]||(e[0]=[i('<h1 id="uiability组件生命周期" tabindex="-1">UIAbility组件生命周期 <a class="header-anchor" href="#uiability组件生命周期" aria-label="Permalink to &quot;UIAbility组件生命周期&quot;">​</a></h1><p>当用户打开、切换和返回到对应应用时，应用中的UIAbility实例会在其生命周期的不同状态之间转换。UIAbility类提供了一系列回调，通过这些回调可以知道当前UIAbility实例的某个状态发生改变，会经过UIAbility实例的创建和销毁，或者UIAbility实例发生了前后台的状态切换。</p><p>UIAbility的生命周期包括Create、Foreground、Background、Destroy四个状态，如下图所示 <img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20241105123300.26756593406375199820299462019912:50001231000000:2800:7BDA805C20E375D5F45E66AB2B49652908AB6557443D9232498F7512A10D8A7B.png" alt="img1"></p><h2 id="create状态" tabindex="-1">Create状态 <a class="header-anchor" href="#create状态" aria-label="Permalink to &quot;Create状态&quot;">​</a></h2><p>Create状态为在应用加载过程中，UIAbility实例创建完成时触发，系统会调用onCreate()回调。可以在该回调中进行页面初始化操作，例如变量定义资源加载等，用于后续的UI展示</p><h2 id="windowstagecreate和windowstagedestroy状态" tabindex="-1">WindowStageCreate和WindowStageDestroy状态 <a class="header-anchor" href="#windowstagecreate和windowstagedestroy状态" aria-label="Permalink to &quot;WindowStageCreate和WindowStageDestroy状态&quot;">​</a></h2><p>UIAbility实例创建完成之后，在进入Foreground之前，系统会创建一个WindowStage。WindowStage创建完成后会进入onWindowStageCreate()回调，可以在该回调中设置UI加载、设置WindowStage的事件订阅 <img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20241105123300.43032212394246443329414963801247:50001231000000:2800:85BF9199BC5B81D769C2943A5DAD29E57A60FE04886C8C655024B4FE289C03EF.png" alt="img2"> 在onWindowStageCreate()回调中通过loadContent()方法设置应用要加载的页面，并根据需要调用on(&#39;windowStageEvent&#39;)方法订阅WindowStage的事件（获焦/失焦、切到前台/切到后台、前台可交互/前台不可交互）。对应于onWindowStageCreate()回调。在UIAbility实例销毁之前，则会先进入onWindowStageDestroy()回调，可以在该回调中释放UI资源。对应onWindowStageWillDestroy()回调，在WindowStage销毁前执行，此时WindowStage可以使用。</p><h2 id="foreground和background状态" tabindex="-1">Foreground和Background状态 <a class="header-anchor" href="#foreground和background状态" aria-label="Permalink to &quot;Foreground和Background状态&quot;">​</a></h2><p>Foreground和Background状态分别在UIAbility实例切换至前台和切换至后台时触发，对应于onForeground()回调和onBackground()回调。</p><p>onForeground()回调，在UIAbility的UI可见之前，如UIAbility切换至前台时触发。可以在onForeground()回调中申请系统需要的资源，或者重新申请在onBackground()中释放的资源。</p><p>onBackground()回调，在UIAbility的UI完全不可见之后，如UIAbility切换至后台时候触发。可以在onBackground()回调中释放UI不可见时无用的资源，或者在此回调中执行较为耗时的操作，例如状态保存等。</p><p>当应用的UIAbility实例已创建，且UIAbility配置为singleton启动模式时，再次调用startAbility()方法启动该UIAbility实例时，只会进入该UIAbility的onNewWant()回调，不会进入其onCreate()和onWindowStageCreate()生命周期回调。应用可以在该回调中更新要加载的资源和数据等，用于后续的UI展示。</p><h2 id="destroy状态" tabindex="-1">Destroy状态 <a class="header-anchor" href="#destroy状态" aria-label="Permalink to &quot;Destroy状态&quot;">​</a></h2><p>Destroy状态在UIAbility实例销毁时触发。可以在onDestroy()回调中进行系统资源的释放、数据的保存等操作。</p>',14)]))}const u=t(r,[["render",n]]);export{b as __pageData,u as default};
