import{_ as i,c as a,a0 as n,o as t}from"./chunks/framework.CGHvQLJz.js";const g=JSON.parse('{"title":"鸿蒙开发Hvigor任务简介","description":"","frontmatter":{},"headers":[],"relativePath":"鸿蒙开发Hvigor任务简介.md","filePath":"鸿蒙开发Hvigor任务简介.md","lastUpdated":null}'),e={name:"鸿蒙开发Hvigor任务简介.md"};function l(p,s,h,o,k,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="鸿蒙开发hvigor任务简介" tabindex="-1">鸿蒙开发Hvigor任务简介 <a class="header-anchor" href="#鸿蒙开发hvigor任务简介" aria-label="Permalink to &quot;鸿蒙开发Hvigor任务简介&quot;">​</a></h1><p>编译构建工具DevEco Hvigor（以下简称Hvigor）是一款基于TS实现的构建任务编排工具，主要提供任务管理机制，包括任务注册编排、工程模型管理、配置管理等关键能力，提供专用于构建和测试应用的流程和可配置设置。</p><p>DevEco Studio使用构建工具Hvigor来自动执行和管理构建流程，实现应用/服务构建任务流的执行，完成HAP/APP的构建打包。</p><p>Hvigor可独立于DevEco Studio运行，这意味着，你可以在DevEco Studio内、命令行工具或是集成服务器上构建应用。无论您从命令行工具或是DevEco Studio上构建项目，构建过程的输出都将相同。</p><h2 id="了解任务" tabindex="-1">了解任务 <a class="header-anchor" href="#了解任务" aria-label="Permalink to &quot;了解任务&quot;">​</a></h2><p>任务是Hvigor构建过程中的执行基本单元，任务中通常包含一段编译过程处理的可执行代码；一个任务可以依赖其他多个任务。Hvigor任务调度执行时通过解析依赖关系确定任务执行时序。</p><h3 id="up-to-date" tabindex="-1">UP-TO-DATE <a class="header-anchor" href="#up-to-date" aria-label="Permalink to &quot;UP-TO-DATE&quot;">​</a></h3><p>任务标识，表示任务未实际执行。Hvigor任务增量跳过机制，在二次执行任务时检测任务输入输出条件未发生变化，则任务跳过执行提高构建效率。例如</p><blockquote><p>hvigor UP-TO-DATE ::PackageApp...</p></blockquote><h3 id="finished" tabindex="-1">Finished <a class="header-anchor" href="#finished" aria-label="Permalink to &quot;Finished&quot;">​</a></h3><p>任务执行完成标识，表示任务已执行完成。例如</p><blockquote><p>hvigor Finished ::PackageApp... after 310 ms</p></blockquote><h2 id="注册任务" tabindex="-1">注册任务 <a class="header-anchor" href="#注册任务" aria-label="Permalink to &quot;注册任务&quot;">​</a></h2><p>使用HvigorNode节点对象注册任务。</p><ol><li>编辑工程下hvigorfile.ts文件。</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导入模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getNode, HvigorNode, HvigorTask } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ohos/hvigor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ol start="2"><li>编写任务代码。</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取当前hvigorNode节点对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HvigorNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注册Task</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;customTask&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;this is Task&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ol start="3"><li>执行任务。 使用hvigor命令行工具执行任务。例如</li></ol><blockquote><p>hvigorw customTask</p></blockquote><ol start="4"><li>查看任务执行结果。</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>PS D:\\SDAutoTestRunInfo\\AppDemo\\MyApplication &gt; hvigorw customTask</span></span>
<span class="line"><span>this is Task</span></span>
<span class="line"><span>&gt; hvigor Finished :: customTask... after 2 ms</span></span>
<span class="line"><span>&gt; hvigor BUILD SUCCESSFUL in 2 s 211 ms</span></span></code></pre></div>`,22)]))}const c=i(e,[["render",l]]);export{g as __pageData,c as default};
