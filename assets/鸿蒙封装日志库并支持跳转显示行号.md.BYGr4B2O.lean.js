import{_ as i,c as a,a0 as n,o as h}from"./chunks/framework.CGHvQLJz.js";const g=JSON.parse('{"title":"鸿蒙封装日志库并支持跳转显示行号","description":"","frontmatter":{},"headers":[],"relativePath":"鸿蒙封装日志库并支持跳转显示行号.md","filePath":"鸿蒙封装日志库并支持跳转显示行号.md"}'),t={name:"鸿蒙封装日志库并支持跳转显示行号.md"};function p(l,s,k,e,E,r){return h(),a("div",null,s[0]||(s[0]=[n(`<h1 id="鸿蒙封装日志库并支持跳转显示行号" tabindex="-1">鸿蒙封装日志库并支持跳转显示行号 <a class="header-anchor" href="#鸿蒙封装日志库并支持跳转显示行号" aria-label="Permalink to &quot;鸿蒙封装日志库并支持跳转显示行号&quot;">​</a></h1><p>查看日志时，你是否经常遇到不知道日志是哪个地方打印的，为了便于查找位置，专门将文件名或类名设置为tag，日志还得传个标记，用于生产环境不打印日志，控制台的日志要是能点击定位到所在位置就好了。现在咱们自己来封装一个日志库，实现这些功能。</p><h2 id="为什么控制台的日志可以点击跳转" tabindex="-1">为什么控制台的日志可以点击跳转 <a class="header-anchor" href="#为什么控制台的日志可以点击跳转" aria-label="Permalink to &quot;为什么控制台的日志可以点击跳转&quot;">​</a></h2><p>首页我们思考一个问题，什么样的日志可以点击跳转到所在位置呢？为什么这样的日志就可以跳转呢？最常见的场景是当程序崩溃时，我们会查看控制台的报错信息，看一下出错的调用栈，调用栈会显示代码所有文件的行号和位置，示例如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Reason:TypeError</span></span>
<span class="line"><span>Error name:TypeError</span></span>
<span class="line"><span>Error message:Cannot read property length of undefined</span></span>
<span class="line"><span>Stacktrace:</span></span>
<span class="line"><span>    at anonymous (products/entry/src/main/ets/entryability/EntryAbility.ets:11:19)</span></span></code></pre></div><p>我们点击一下文件就可以跳转过去了，是不是我们的日志只要包含文件的具体路径和行列号就行了呢？我们可以手动打印一下这个<code>at anonymous (products/entry/src/main/ets/entryability/EntryAbility.ets:11:19)</code>,发现确定可以点击跳转。</p><h2 id="如何实现日志的跳转功能" tabindex="-1">如何实现日志的跳转功能 <a class="header-anchor" href="#如何实现日志的跳转功能" aria-label="Permalink to &quot;如何实现日志的跳转功能&quot;">​</a></h2><p>现在我们只要能获取到打印日志时所在文件的行号和列号就可以了。程序出错时，会显示程序的调用栈，在调用栈中，我们可以获取到文件的位置，那我们创建一个Error对象，就可以获取到调用栈了，示例如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (hilog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isLoggable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xFF01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aloe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hilog.LogLevel.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err.stack?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hilog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xFF01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aloe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;%{public}s&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里我们不需要完整的调用栈，用换行符分割取第二条，第一条是当前方法，第二条是调用的地方，所以我们取第二条，实际情况由于不同的封装，这里所取的位置会有所不同。</p><h2 id="如何屏蔽生产环境不打印日志" tabindex="-1">如何屏蔽生产环境不打印日志 <a class="header-anchor" href="#如何屏蔽生产环境不打印日志" aria-label="Permalink to &quot;如何屏蔽生产环境不打印日志&quot;">​</a></h2><p>一般我们会设置一个参数用于是否屏蔽参数，初始化时判断<code>release</code>环境就屏蔽掉，其实这种方式不太准确，因为我们没上架前，会遇到<code>release</code>环境查看日志的情况，推荐打APP包，准备上架时，将此参数设置为不打印，所以编译时，我们判断下是否打APP包就行了，示例如下，首先在<code>build-profile.json5</code>中设置参数，默认打印日志</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;apiType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stageMode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;buildOption&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;arkOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;buildProfileFields&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;LOG_ENABLE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后在<code>hvigorfile.ts</code>中判断上架环境并设置为不打印日志，示例如下</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { hapTasks, OhosHapContext, OhosPluginId } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ohos/hvigor-ohos-plugin&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { hvigor, getNode } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ohos/hvigor&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entryNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">entryNode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">afterNodeEvaluate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (hvigor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCommandEntryTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;assembleApp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hapCtx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OhosPluginId.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OHOS_HAP_PLUGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OhosHapContext</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> profileOpt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hapCtx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBuildProfileOpt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fields</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> profileOpt[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;buildOption&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;arkOptions&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;buildProfileFields&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fields[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;LOG_ENABLE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hapCtx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBuildProfileOpt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(profileOpt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>我们只要在封装的日志库中加上<code>BuildProfile.LOG_ENABLE</code>判断就可以屏蔽线上日志了，同时自己调试时，<code>release</code>环境也能正常查看日志，也不用外部传参了，是不是很方便。</p>`,16)]))}const o=i(t,[["render",p]]);export{g as __pageData,o as default};
