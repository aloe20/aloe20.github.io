import{_ as i,c as l,a0 as a,o as t}from"./chunks/framework.CGHvQLJz.js";const u=JSON.parse('{"title":"鸿蒙高质量代码静态检测200条一","description":"","frontmatter":{},"headers":[],"relativePath":"鸿蒙高质量代码静态检测200条一.md","filePath":"鸿蒙高质量代码静态检测200条一.md","lastUpdated":null}'),n={name:"鸿蒙高质量代码静态检测200条一.md"};function e(p,s,h,k,r,o){return t(),l("div",null,s[0]||(s[0]=[a(`<h1 id="鸿蒙高质量代码静态检测200条一" tabindex="-1">鸿蒙高质量代码静态检测200条一 <a class="header-anchor" href="#鸿蒙高质量代码静态检测200条一" aria-label="Permalink to &quot;鸿蒙高质量代码静态检测200条一&quot;">​</a></h1><ol><li>@typescript-eslint/adjacent-overload-signatures</li></ol><ul><li>建议函数重载的签名保持连续</li></ul><ol start="2"><li>@typescript-eslint/await-thenable</li></ol><ul><li>不允许对不是“Thenable”对象的值使用await关键字，相反对“Thenable”对象必须使用await，例如对Promise对象。</li></ul><ol start="3"><li>@typescript-eslint/array-type</li></ol><ul><li>定义数组时，使用统一的样式，如都使用T[]或都使用Array&lt;T&gt;。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@typescript-eslint/array-type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;array&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ul><li>default的值设置为array时，统一使用T[]；设置generic时，统一使用Array&lt;T&gt;，设置为array-simple时，简单类型使用T[]，其它类型使用Array&lt;T&gt;</li></ul><ol start="4"><li>@typescript-eslint/ban-ts-comment</li></ol><ul><li>不允许使用<code>@ts-&lt;directional&gt;</code>格式的注释，或要求在注释后进行补充说明</li></ul><ol start="5"><li>@typescript-eslint/ban-tslint-comment</li></ol><ul><li>不允许使用<code>//tslint:&lt;rule-flag&gt;</code>格式的注释</li></ul><ol start="6"><li>@typescript-eslint/ban-types</li></ol><ul><li>不允许使用某些类型，例如类型小写保持一致，使用string，boolean，number等等，而不是String，Boolean，Number。</li></ul><ol start="7"><li>@typescript-eslint/brace-style</li></ol><ul><li>要求代码块的左大括号与其对应的语句或声明位于同一行。</li></ul><ol start="8"><li>@typescript-eslint/class-literal-property-style</li></ol><ul><li>建议类中的字面量属性对外暴露时，保持一致的风格</li></ul><ol start="9"><li>@typescript-eslint/comma-dangle</li></ol><ul><li>允许或禁止使用尾随逗号，类的最后一个属性或者数组最后一个元素禁止尾随逗号</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@typescript-eslint/comma-dangle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //      never | always</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;arrays&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;never&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;objects&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;never&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;never&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;never&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;functions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;never&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ul><li>共有数组arrays，对象objects，导入imports，导出exports和函数functions五各类型支持配置，值设置为never则是禁止尾随逗号，设置为always则是允许尾随逗号。</li></ul><ol start="10"><li>@typescript-eslint/comma-spacing</li></ol><ul><li>强制逗号前后的空格风格保持一致，例如强制要求逗号前不加空格，逗号后必须添加空格</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@typescript-eslint/comma-spacing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;before&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;after&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol start="11"><li>@typescript-eslint/consistent-type-assertions</li></ol><ul><li>强制使用一致的类型断言</li></ul><ol start="12"><li>@typescript-eslint/default-param-last</li></ol><ul><li>强制默认参数位于参数列表的最后一个</li></ul><ol start="13"><li>@typescript-eslint/explicit-member-accessibility</li></ol><ul><li>在类属性和方法上需要显式定义访问修饰符</li></ul><ol start="14"><li>@typescript-eslint/func-call-spacing</li></ol><ul><li>禁止或者要求函数名与函数名后面的括号之间加空格</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@typescript-eslint/func-call-spacing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;never&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ul><li>设置为never时，函数名后面禁止添加空格，设置为always时，函数名后面允许添加空格</li></ul><ol start="15"><li>@typescript-eslint/init-declarations</li></ol><ul><li>禁止或者要求在变量声明中进行初始化</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@typescript-eslint/init-declarations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;always&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ul><li>设置为always时，声明变量必须初始化，设置为never时，声明变量可以不初始化。</li></ul><ol start="16"><li>@typescript-eslint/keyword-spacing</li></ol><ul><li>强制在关键字之前和关键字之后保持一致的空格风格，例如在关键字前后都添加空格</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@typescript-eslint/keyword-spacing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;before&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;after&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol start="17"><li>@typescript-eslint/lines-between-class-members</li></ol><ul><li>禁止或者要求类成员之间有空行分隔，always为允许有空行，never为不允许有空行，如下设置空行后不加空行，属性和方法之前添加空行。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@typescript-eslint/lines-between-class-members&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    enforce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">        blankLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;never&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">        prev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;field&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">        next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;method&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol start="18"><li>@typescript-eslint/member-delimiter-style</li></ol><ul><li>要求接口和类型别名中的成员之间使用特定的分隔符，支持定义的分隔符有三种：分号、逗号、无分隔符</li></ul><ol start="19"><li>@typescript-eslint/member-ordering</li></ol><ul><li>要求类、接口和类型字面量中成员的排序方式保持一致的风格</li></ul><ol start="20"><li>@typescript-eslint/naming-convention</li></ol><ul><li>强制标识符使用一致的命名风格。例如类名使用大驼峰，函数使用小驼峰。</li></ul><ol start="21"><li>@typescript-eslint/no-array-constructor</li></ol><ul><li>不允许使用“Array”构造函数。</li></ul><ol start="22"><li>@typescript-eslint/no-base-to-string</li></ol><ul><li>要求当一个对象在字符串化时提供了有用的信息，才能调用“toString()”方法</li></ul><ol start="23"><li>@typescript-eslint/no-confusing-non-null-assertion</li></ol><ul><li>不允许在可能产生混淆的位置使用非空断言</li></ul><ol start="24"><li>@typescript-eslint/no-confusing-void-expression</li></ol><ul><li>要求void类型的表达式出现在合适的位置</li></ul><ol start="25"><li>@typescript-eslint/no-dupe-class-members</li></ol><ul><li>不允许重复的类成员，即已经声明的成员属性，不允许重复再声明一次。</li></ul><ol start="26"><li>@typescript-eslint/no-duplicate-imports</li></ol><ul><li>禁止重复的模块导入，即已经导入的模块，不允许再再次导入。</li></ul><ol start="27"><li>@typescript-eslint/no-empty-function</li></ol><ul><li>不允许使用空函数，支持的白名单配置包括函数，箭头函数，方法，构造方法等等，配置如下</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@typescript-eslint/no-empty-function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;allow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;functions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;arrowFunctions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;generatorFunctions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;methods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;generatorMethods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;getters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;setters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;constructors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;asyncFunctions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;asyncMethods&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol start="28"><li>@typescript-eslint/no-empty-interface</li></ol><ul><li>不允许声明空接口</li></ul><ol start="29"><li>@typescript-eslint/no-extraneous-class</li></ol><ul><li>不允许将类用作命名空间</li></ul><ol start="30"><li>@typescript-eslint/no-extra-non-null-assertion</li></ol><ul><li>不允许多余的非空断言</li></ul><ol start="31"><li>@typescript-eslint/no-extra-parens</li></ol><ul><li>禁止使用不必要的括号</li></ul><ol start="32"><li>@typescript-eslint/no-extra-semi</li></ol><ul><li>禁止使用不必要的分号</li></ul><ol start="33"><li>@typescript-eslint/no-floating-promises</li></ol><ul><li>要求正确处理Promise表达式，例如Promise一定要处理异常情况</li></ul><ol start="34"><li>@typescript-eslint/no-implied-eval</li></ol><ul><li>禁止使用类似“eval()”的方法</li></ul><ol start="35"><li>@typescript-eslint/no-inferrable-types</li></ol><ul><li>不允许对初始化为数字、字符串或布尔值的变量或参数进行显式类型声明</li></ul><ol start="36"><li>@typescript-eslint/no-invalid-this</li></ol><ul><li>禁止在this的值为undefined的上下文中使用this</li></ul><ol start="37"><li>@typescript-eslint/no-invalid-void-type</li></ol><ul><li>禁止在返回类型或者泛型类型之外使用void</li></ul><ol start="38"><li>@typescript-eslint/no-loss-of-precision</li></ol><ul><li>禁止使用失去精度的字面数字</li></ul><ol start="39"><li>@typescript-eslint/no-magic-numbers</li></ol><ul><li>禁止使用魔法数字。但有些情况下我们又需要直接使用数字，例如定义枚举时，在数组中根据索引取数据时，或者直接定义某些值不是魔法数字，示例如下</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@typescript-eslint/no-magic-numbers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;off&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ignoreEnums&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ignoreArrayIndexes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ignoreNumericLiteralTypes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ignore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol start="40"><li>@typescript-eslint/no-misused-new</li></ol><ul><li>要求正确地定义“new”和“constructor”</li></ul><ol start="41"><li>@typescript-eslint/no-misused-promises</li></ol><ul><li>禁止在不正确的位置使用Promise</li></ul><ol start="42"><li>@typescript-eslint/no-non-null-asserted-optional-chain</li></ol><ul><li>禁止在可选链表达式之后使用非空断言</li></ul><ol start="43"><li>@typescript-eslint/no-non-null-assertion</li></ol><ul><li>禁止以感叹号作为后缀的方式使用非空断言</li></ul><ol start="44"><li>@typescript-eslint/no-redeclare</li></ol><ul><li>禁止变量重复声明，即前面声明过的变量，不允许再次声明。</li></ul><ol start="45"><li>@typescript-eslint/no-require-imports</li></ol><ul><li>禁止使用“require()”语法导入依赖</li></ul><ol start="46"><li>@typescript-eslint/no-restricted-syntax</li></ol><ul><li>不允许使用指定的（即用户在规则中定义的）语法。例如不允许直接使用console.log打印日志，而是使用我们封装好的LogUtil打印日志</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@typescript-eslint/no-restricted-syntax&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;selector&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CallExpression[callee.name=&#39;console.log&#39;]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;不要直接使用console打印日志，请使用LogUtil&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol start="47"><li>@typescript-eslint/no-shadow</li></ol><ul><li>禁止声明与外部作用域变量同名的变量</li></ul><ol start="48"><li>@typescript-eslint/no-throw-literal</li></ol><ul><li>禁止将字面量作为异常抛出</li></ul><ol start="49"><li>@typescript-eslint/no-unnecessary-boolean-literal-compare&quot;</li></ol><ul><li>禁止将布尔值和布尔字面量直接进行比较</li></ul><ol start="50"><li>@typescript-eslint/no-unnecessary-condition</li></ol><ul><li>不允许使用类型始终为真或始终为假的表达式作为判断条件</li></ul><ol start="51"><li>@typescript-eslint/no-unnecessary-qualifier</li></ol><ul><li>禁止不必要的命名空间限定符</li></ul>`,117)]))}const c=i(n,[["render",e]]);export{u as __pageData,c as default};
